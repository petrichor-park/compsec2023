Petrichor Park

=== Daytime ===

= 1 =

1: 10.133.138.240 -> 128.138.140.44 TCP [SYN]
2: 128.138.140.44 -> 10.133.138.240 TCP [SYN/ACK]
3: 10.133.138.240 -> 128.138.140.44 TCP [SYN]

= 2 =

Kali uses port 49174

= 3 =

The client has to be able to receive the data, so it opens a random high-
numbered port that no one happens to be using at the time.

= 4 =

5: 128.138.140.44 -> 10.133.138.240 DAYTIME

= 5 =

> 60200 23-09-13 17:08:03 50 0 0 275.6 UTC(NIST) * 

The DAYTIME protocol specifies absolutely nothing about the content, which
feels like it might lead to pedantic assholery about opening a DAYTIME service
on your personal server that just prints "DEEZ NUTS" or something.

The specific format used by NIST is here:
https://www.nist.gov/pml/time-and-frequency-division/time-distribution/internet-time-service-its

So, this was
- 60200 : Modified Julian Date, meaning it's been 60,200 days since ...
  November 17 1858. I assume something fantastic must have happened on that
  day. Maybe it's Mr. Julian's birthday.
- 23-09-13 : 2023, 9th month (September), 13th day
- 17:08:03 : The time in UTC
- 50 : It is currently Daylight Savings Time, which they encode in the most
  confusing way humanly possible.
- 0 : No leap second will be added at the end of this month
- 0 : The server's health is good
- 275.6 : NIST guesses that network delays will make the time they printed 
  actually be 275.6ms late.
- UTC(NIST) : always this, indicates that you're getting UTC time from NIST
- OTM : The times printed above are targeting the time when THIS byte is
  received.

= 6, 7, 8 =

The TCP handshake starts SYN, SYN/ACK, ACK.
- The client sends a SYNchronize packet
- The server gets the SYN and sends an ACKnowledge packet
- The client gets the ACK
This way both sides know that both sides can both send and receive packets.

FIN is kind of the same but for ending the connection, so both sides know that
both sides are through communicating.

= 9 =

The server closed the connection because the first FIN packet was from the
server to nc.

=== HTTP ===

= 1 =

80 packets total were sent. I see 3 high-numbered ports the client uses to
connect, so my guess is that that means 3 connections were opened.

This corresponds with how there were 3 resources requested from the server (the
HTML, your face, and the favicon). But interestingly the ports don't seem to
correspond to these resources. For example the whole thing starts with Firefox
querying the server *twice*, on two different client ports. Perhaps this is so
if one connection is dropped, there's a backup?

= 2 =

Packet #5, GET /index.html HTTP/1.1

= 3 =

Packet #16, GET /jeff_square_head.jpg HTTP/1.1

=== Questions ===

I'm not entirely sure what "a TCP connection" here means. As far as I know the
idea of a "connection" is abstract and there's no "connection object," just the
client and server sending packets back and forth on a pre-agreed-upon pair of
ports.

I do wonder why you made the website distribute the HTML as gzipped, because
I think it would have been cool to be able to see the source code in Wireshark.

After it requests the jpg image, there are TONS of TCP packets sent back and
forth. The client is sending [ACK] and the server is sending [PSH, ACK], but
they're not strictly alternating. Wireshark says the [PSH, ACK] ones are "TCP
segments of a reassembled PDU."

PSH apparently signals to the client that the data shouldn't be buffered and
should instead be displayed immediately.

A "PDU" is a "Protocol Data Unit" which I think means that a very large amount
of information is being sent in multiple packets because it's too large for one
packet.

https://packetlife.net/blog/2011/mar/2/tcp-flags-psh-and-urg/

https://en.wikipedia.org/wiki/Protocol_data_unit

My guess is this is the sending of the image. There are tons and tons of
packets because images are large files. The PSH flag is set by the server
to make sure that the user can see the image ASAP. The client is sending ACK
packets back, but there's no need for it to be perfectly in sync so sometimes
I see a few packets of the same type in a row.

Aha, yes I think this is it. Logically all these little packets should be
considered one giant packet containing the HTTP response and the image data,
but Wireshark is displaying it flat instead of nested.
